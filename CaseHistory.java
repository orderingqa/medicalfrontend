/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ls.jtsk.ui;

import java.util.List;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;
import ls.jtsk.helper.CasesHelper;
import ls.jtsk.model.Cases;
import ls.jtsk.ui.controller.CentralController;

/**
 *
 * @author liushuai
 */


// TODO 待总结，我手动的将所有的eclipse下面引用的jar文件拷贝到一个lib下，然后修正log4j.properties，然后在将apgar.db文件拷贝到外层，这样实现了在netbean下面
// 运行程序。

public class CaseHistory extends javax.swing.JFrame {
    
    // TODO 这个需要控制不能为-1，以及需要控制什么时候不能上一页，什么时候不能下一页。
    private int currentPage = 0;
    private int numbersPerPage = 15;
    // 该list用来作为table和model进行通信的媒介。基于选择的表行，我们从这个list中取出数据，从而往后面传递。
    List <Cases> modelList = null;
//    Cases currentCase = null;
    // TODO 采用currentSelectIndex而不是上面的currentCase来标记当前鼠标选择。
//    原因是如果用currentCase来标记当前鼠标位置，那么当新加Cases而造成model变化后，查看当前Case详情时，会是model变化前的那个指向的case
    int currentSelectIndex = 0;
    // TODO case history 需要title，title应该是输入的医院和大夫名字。
    /**
     * Creates new form CaseHistory
     */
    public CaseHistory() {
        initComponents();
        fillCaseListAtFirstTime();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        caseListTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        createCaseButton = new javax.swing.JButton();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        viewExistingCasesButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        apgarScoreButton = new javax.swing.JButton();
        printButton = new javax.swing.JButton();
        previousPageButton = new javax.swing.JButton();
        nextPageButton = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("阿氏评分法自动评分仪PC版");
        setResizable(false);

        caseListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        caseListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                caseSelectFunction(evt);
            }
        });
        jScrollPane1.setViewportView(caseListTable);

        jLabel1.setText("单位");

        jLabel2.setText("宣武医院妇产科");

        createCaseButton.setText("新建病历");
        createCaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCaseButtonActionPerformed(evt);
            }
        });

        jSpinner1.setEnabled(false);

        jLabel5.setText("跳转到第");

        jLabel6.setText("页");

        viewExistingCasesButton.setText("查看病历");
        viewExistingCasesButton.setEnabled(false);
        viewExistingCasesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewExistingCasesButtonActionPerformed(evt);
            }
        });

        jButton3.setText("修改病历");
        jButton3.setEnabled(false);

        jButton4.setText("删除病历");
        jButton4.setEnabled(false);

        apgarScoreButton.setText("apgar打分");
        apgarScoreButton.setEnabled(false);
        apgarScoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apgarScoreButtonActionPerformed(evt);
            }
        });

        printButton.setText("打印");
        printButton.setEnabled(false);
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        previousPageButton.setText("上一页");
        previousPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousPageButtonActionPerformed(evt);
            }
        });

        nextPageButton.setText("下一页");
        nextPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextPageButtonActionPerformed(evt);
            }
        });

        jButton9.setText("Go");
        jButton9.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(createCaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 818, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 20, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(viewExistingCasesButton)
                        .addGap(79, 79, 79)
                        .addComponent(jButton3)
                        .addGap(97, 97, 97)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(printButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(88, 88, 88)
                        .addComponent(apgarScoreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(previousPageButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nextPageButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel1))
                    .addComponent(createCaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewExistingCasesButton)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(apgarScoreButton)
                    .addComponent(printButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(previousPageButton)
                    .addComponent(nextPageButton)
                    .addComponent(jButton9))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextPageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextPageButtonActionPerformed
        currentPage++;
        updateModelFromExternal();
    }//GEN-LAST:event_nextPageButtonActionPerformed

    public void updateModelFromExternal() {
        // 每一次对getCasesSortByField的调用，都会有sessionfactory不释放问题。会不会问题严重，需要dive deep
        modelList = CasesHelper.getCasesSortByField(numbersPerPage, currentPage, "createDate DESC");
        ((CaseTableModel)caseListTable.getModel()).setList(modelList);
        caseListTable.updateUI();
    }
    
    
    // TODO 这个函数也提供给外部调用，因为如果对一个case做了修改，那么下面的button需要在更改保存后更新。
    public void updateButtonForCurrentCase() {
        currentSelectIndex = caseListTable.getSelectedRow();
        Cases currentCase = (Cases) modelList.get(currentSelectIndex);
        if (currentCase.getGravida().getBabys() != null && currentCase.getGravida().getBabys().size() > 0) {
//            int babyNum = currentCase.getGravida().getBabys().size();
            printButton.setEnabled(true);
            apgarScoreButton.setEnabled(false);
        } else {
            printButton.setEnabled(false);
            apgarScoreButton.setEnabled(true);
        }
        viewExistingCasesButton.setEnabled(true);
    }
    
    private void createCaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCaseButtonActionPerformed
        CentralController.displayCreateCaseWindow(this);        
    }//GEN-LAST:event_createCaseButtonActionPerformed

    private void previousPageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousPageButtonActionPerformed
        currentPage--;
        updateModelFromExternal();
    }//GEN-LAST:event_previousPageButtonActionPerformed

    private void caseSelectFunction(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_caseSelectFunction
        updateButtonForCurrentCase();
    }//GEN-LAST:event_caseSelectFunction

    private void viewExistingCasesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewExistingCasesButtonActionPerformed
        Cases currentCase = (Cases) modelList.get(currentSelectIndex);
        CentralController.viewExistingCase(currentCase);
    }//GEN-LAST:event_viewExistingCasesButtonActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        Cases currentCase = (Cases) modelList.get(currentSelectIndex);
        CentralController.printExistCase(currentCase);
    }//GEN-LAST:event_printButtonActionPerformed

    private void apgarScoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apgarScoreButtonActionPerformed
        Cases currentCase = (Cases) modelList.get(currentSelectIndex);
        CentralController.showBabyInputFromCaseList(currentCase, this);
    }//GEN-LAST:event_apgarScoreButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CaseHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CaseHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CaseHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CaseHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CaseHistory().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton apgarScoreButton;
    private javax.swing.JTable caseListTable;
    private javax.swing.JButton createCaseButton;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JButton nextPageButton;
    private javax.swing.JButton previousPageButton;
    private javax.swing.JButton printButton;
    private javax.swing.JButton viewExistingCasesButton;
    // End of variables declaration//GEN-END:variables


    private void fillCaseListAtFirstTime() {
        modelList  = CasesHelper.getLatestCases(numbersPerPage);
//        Cases topCase = (Cases)list.get(0);
//        System.out.println(topCase.getGravida().getName());
        CaseTableModel ctm = new CaseTableModel(modelList);
        caseListTable.setModel(ctm);
        currentPage = 1;
    }
    
    class CaseTableModel implements TableModel {
        List <Cases> caseList = null;
        String[] columnStrings = new String [] {"住院号", "产妇姓名", "产妇年龄", "主治医生", "建档日期"};
        
        public CaseTableModel(List <Cases> l) {
            caseList = l;
        }
        
        public void setList(List <Cases> newList) {
            caseList = newList;
        }
        
        @Override
        public int getRowCount() {
            return caseList.size();
        }

        @Override
        public int getColumnCount() {
            return 5;
        }

        @Override
        public String getColumnName(int columnIndex) {      
             return columnStrings[columnIndex];
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            return String.class;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
//            throw new UnsupportedOperationException("Not supported yet.");
            return false;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Cases currentCase = caseList.get(rowIndex);
            String value = null;
            switch (columnIndex) {
                case 0:
                    value = new Integer(currentCase.getGravida().getMedicNo()).toString(); break;
                case 1:
                    value = currentCase.getGravida().getName(); break;
                case 2:
                    value = new Integer(currentCase.getGravida().getAge()).toString(); break;
                case 3:
                    value = currentCase.getDoctor().getDoctorName(); break;
                case 4:
                    value = currentCase.getCreateDate(); break;
                default: ;
            }
            return value;
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
//            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public void addTableModelListener(TableModelListener l) {
//            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public void removeTableModelListener(TableModelListener l) {
//            throw new UnsupportedOperationException("Not supported yet.");
        }
        
    }
}
